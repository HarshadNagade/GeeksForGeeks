/* A binary tree node has data, pointer to left child
   and a pointer to right child
struct Node
{
    int data;
    Node* left;
    Node* right;
}; */

class Solution {
  public:
  
  
  void serializePreOrder(Node *root,vector<int>& arr){
        if(root==nullptr){
            arr.push_back(-1);
            return ;
        }
        arr.push_back(root->data);
        
        serializePreOrder(root->left,arr);
        serializePreOrder(root->right,arr);
  }
  
  
    vector<int> serialize(Node *root) {
    
    vector<int>arr;
    serializePreOrder(root,arr);
    return arr;
    }


    
    Node * desrializePreOrder(int & i,vector<int>&arr){
        if(arr[i]==-1){
            i++;
            return nullptr;
        }
        Node *root= new Node(arr[i]);
        i++;
        
        root->left=desrializePreOrder(i,arr);
        root->right=desrializePreOrder(i,arr);
        
        return root;
    }
    Node *deSerialize(vector<int> &arr) {
        int i=0;
        return desrializePreOrder(i,arr);
        }
};
